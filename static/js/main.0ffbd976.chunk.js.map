{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["fonts","getHex","Math","random","toString","slice","padZero","str","len","Array","join","document","body","onkeyup","a","keyCode","rand","floor","length","txtColor","hex","bw","indexOf","Error","r","parseInt","g","b","invertColor","require","get","crossDomain","then","response","getElementById","innerHTML","data","bgColor","style","background","setBackground","color","className","App","href","rel","class","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8MAEIA,G,YAAQ,CAAC,SACX,YACA,UACA,SACA,gBACA,kBACA,OACA,WACA,iBAiBF,SAASC,IACP,MAAO,IAAMC,KAAKC,SAASC,SAAS,IAAIC,MAAM,EAAG,GA4BnD,SAASC,EAAQC,EAAKC,GAGpB,OAFAA,EAAMA,GAAO,GACD,IAAIC,MAAMD,GAAKE,KAAK,KAChBH,GAAKF,OAAOG,GAtB9BG,SAASC,KAAKC,QAAU,SAAUC,GAChC,GAAkB,KAAdA,EAAEC,QAAgB,CACpB,IAAIC,EAAOhB,EAAME,KAAKe,MAAMf,KAAKC,SAAWH,EAAMkB,SAE9CC,EAqBR,SAAqBC,EAAKC,GACC,IAArBD,EAAIE,QAAQ,OACdF,EAAMA,EAAIf,MAAM,IAGC,IAAfe,EAAIF,SACNE,EAAMA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,IAEzD,GAAmB,IAAfA,EAAIF,OACN,MAAM,IAAIK,MAAM,sBAElB,IAAIC,EAAIC,SAASL,EAAIf,MAAM,EAAG,GAAI,IAChCqB,EAAID,SAASL,EAAIf,MAAM,EAAG,GAAI,IAC9BsB,EAAIF,SAASL,EAAIf,MAAM,EAAG,GAAI,IAChC,GAAIgB,EAEF,MAAY,KAAJG,EAAgB,KAAJE,EAAgB,KAAJC,EAAa,IACzC,UACA,UAON,OAJAH,GAAK,IAAMA,GAAGpB,SAAS,IACvBsB,GAAK,IAAMA,GAAGtB,SAAS,IACvBuB,GAAK,IAAMA,GAAGvB,SAAS,IAEhB,IAAME,EAAQkB,GAAKlB,EAAQoB,GAAKpB,EAAQqB,GA9C9BC,CADD3B,KAEA4B,EAAQ,IAEhBC,IAAI,8CAA+C,CAAEC,aAAa,IAAQC,MAAK,SAAUC,GAE7FtB,SAASuB,eAAe,WAAWC,UAAYF,EAASG,QACvDJ,MAAK,SAAUC,IAhBtB,WACE,IAAII,EAAUpC,IACdU,SAASC,KAAK0B,MAAMC,WAAaF,EAe7BG,GACA7B,SAASuB,eAAe,WAAWI,MAAMG,MAAQtB,EACjDR,SAASuB,eAAe,WAAWQ,UAAY1B,OAuCtC2B,MA5Ef,WACE,OACE,sBAAKD,UAAU,MAAf,UACE,sBAAME,KAAK,mIAAmIC,IAAI,eAElJ,wBAAQH,UAAU,aAAlB,SACE,qBAAKI,MAAM,OAAX,SACE,oBAAIC,GAAG,UAAP,iDCRKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/C,SAASuB,eAAe,SAM1Bc,M","file":"static/js/main.0ffbd976.chunk.js","sourcesContent":["import './App.css';\n\nvar fonts = ['Roboto',\n  'Open_Sans',\n  'Raleway',\n  'Rakkas',\n  'Abril_Fatface',\n  'Berkshire_Swash',\n  'Arvo',\n  'Spectral',\n  'Germania_one'\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link href=\"https://fonts.googleapis.com/css?family=Open+Sans|Raleway|Roboto|Rakkas|Abril+Fatface|Berkshire+Swash|Arvo|Spectral|Germania+One\" rel=\"stylesheet\">\n      </link>\n      <header className=\"App-header\">\n        <div class=\"text\">\n          <h1 id=\"apology\">Press spacebar to apologize</h1>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nfunction getHex() {\n  return '#' + Math.random().toString(16).slice(2, 8);\n}\n\nfunction setBackground() {\n  var bgColor = getHex();\n  document.body.style.background = bgColor;\n}\n\n\ndocument.body.onkeyup = function (a) {\n  if (a.keyCode === 32) {\n    var rand = fonts[Math.floor(Math.random() * fonts.length)];\n    var bgColor = getHex();\n    var txtColor = invertColor(bgColor);\n    const axios = require('axios')\n\n    axios.get('/generate', { crossDomain: true }).then(function (response) {\n      //console.log(response);\n      document.getElementById(\"apology\").innerHTML = response.data;\n    }).then(function (response) {\n      setBackground();\n      document.getElementById(\"apology\").style.color = txtColor;\n      document.getElementById(\"apology\").className = rand;\n    });\n\n  }\n}\n\nfunction padZero(str, len) {\n  len = len || 2;\n  var zeros = new Array(len).join('0');\n  return (zeros + str).slice(-len);\n}\n\nfunction invertColor(hex, bw) {\n  if (hex.indexOf('#') === 0) {\n    hex = hex.slice(1);\n  }\n  // convert 3-digit hex to 6-digits.\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n  if (hex.length !== 6) {\n    throw new Error('Invalid HEX color.');\n  }\n  var r = parseInt(hex.slice(0, 2), 16),\n    g = parseInt(hex.slice(2, 4), 16),\n    b = parseInt(hex.slice(4, 6), 16);\n  if (bw) {\n    // http://stackoverflow.com/a/3943023/112731\n    return (r * 0.299 + g * 0.587 + b * 0.114) > 186\n      ? '#000000'\n      : '#FFFFFF';\n  }\n  // invert color components\n  r = (255 - r).toString(16);\n  g = (255 - g).toString(16);\n  b = (255 - b).toString(16);\n  // pad each with zeros and return\n  return \"#\" + padZero(r) + padZero(g) + padZero(b);\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'pace-js'\nimport 'pace-js/themes/red/pace-theme-flat-top.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}